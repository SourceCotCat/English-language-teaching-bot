import telebot
from telebot import types
from database import (
    connect,
    new_user,
    get_categories,
    get_words_by_category,
    get_word_and_vars,
    add_word,
    delete_word,
    get_wrong_translations
)
import os
import random
from dotenv import load_dotenv

load_dotenv()
bot = telebot.TeleBot(os.getenv("TOKEN"))
user_states = {}  # –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è


@bot.message_handler(commands=['start'])
def welcome(message):
    user = message.from_user

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    try:
        user_id_db = new_user(user)  
        print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID –≤ –ë–î: {user_id_db}")
    except Exception as e:
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    first_name = user.first_name
    last_name = user.last_name if user.last_name else ""
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! –ù–∞—á–Ω—ë–º —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!")
    
    menu(message.chat.id)

def menu(chat):
    keyb = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    press_learn = types.KeyboardButton('üß† –£—á–∏—Ç—å —Å–ª–æ–≤–∞')
    press_category = types.KeyboardButton('üìë –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    press_add = types.KeyboardButton('üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
    press_delete = types.KeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
    keyb.add(press_learn, press_category, press_add, press_delete)
    bot.send_message(chat, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyb)


@bot.message_handler(func=lambda m: m.text == 'üìë –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
def choose_category(message):
    categories = get_categories()
    if not categories:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return
    inline_keyb = types.InlineKeyboardMarkup(row_width=1)
    for id, name in categories:
        inline_keyb.add(types.InlineKeyboardButton(name, callback_data=f"category_{id}"))
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=inline_keyb)


@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def category(call):
    category_id = int(call.data.split("_")[1])
    user_states[call.from_user.id] = {'category_id': category_id, 'attempts': 0}
    send_next_word(call.from_user.id, category_id)


def send_next_word(chat_id, category_id=None):
    if category_id:
        word_data = get_words_by_category(category_id)
        if not word_data:
            bot.send_message(chat_id, "–ù–µ—Ç –±–æ–ª—å—à–µ —Å–ª–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            menu(chat_id)
            return

        word_id, original, correct_translation = word_data
        wrong_translations = get_wrong_translations(word_id)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
        options = [correct_translation] + wrong_translations
        random.shuffle(options)

        user_states[chat_id] = {
            'correct': correct_translation,
            'category_id': category_id,
            'attempts': 0
        }

    else:
        original, options, correct_translation = get_word_and_vars()
        if not options:
            bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤.")
            menu(chat_id)
            return

        # –ü–æ–¥—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫
        if len(options) < 4:
            with connect() as conn:
                cur = conn.cursor()
                cur.execute("""
                    SELECT translation FROM translations
                    WHERE word_id != %s
                    ORDER BY RANDOM() LIMIT 3
                """, (word_id,))
                extra_wrongs = [row[0] for row in cur.fetchall()]
                options = list(set([correct_translation] + extra_wrongs))[:4]

        random.shuffle(options)

        user_states[chat_id] = {
            'correct': correct_translation,
            'category_id': None,
            'attempts': 0
        }

    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(option) for option in options]
    buttons.append(types.KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))  # –¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥
    markup.add(*buttons)

    bot.send_message(
        chat_id,
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{original}*",
        parse_mode="Markdown",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == 'üß† –£—á–∏—Ç—å —Å–ª–æ–≤–∞')  # –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –∫–Ω–æ–ø–æ—á–∫–æ–π press_learn
def lear_words(message):
    send_next_word(message.chat.id)


@bot.message_handler(func=lambda m: m.text == 'üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
def handle_add_word(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å:(–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ)')
    user_states[message.chat.id] = {'stage': 'original'}


@bot.message_handler(func=lambda m: m.text == 'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
def handle_delete_word(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:')
    user_states[message.chat.id] = {'stage': 'delete'}


@bot.message_handler(func=lambda message: True)
def handle_input(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id, {})

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        menu(chat_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ø–µ—Ä–µ–≤–æ–¥
    if state.get('correct') is not None:
        if text == state['correct']:
            bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            if state.get('category_id') is not None:
                send_next_word(chat_id, state['category_id'])
            else:
                send_next_word(chat_id)
            return
        else:
            attempts = state.get('attempts', 0) + 1
            if attempts < 2:
                bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –£ –≤–∞—Å {attempts}/2 –ø–æ–ø—ã—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞:")
                user_states[chat_id]['attempts'] = attempts
            else:
                bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{state['correct']}*", parse_mode="Markdown")
                menu(chat_id)
            return

    # –õ–æ–≥–∏–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    if state.get('stage') == 'original':
        user_states[chat_id]['original'] = text
        user_states[chat_id]['stage'] = 'translation'
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:")

    elif state.get('stage') == 'translation':
        user_states[chat_id]['translation'] = text
        user_states[chat_id]['stage'] = 'example'
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")

    elif state.get('stage') == 'example':
        example = text
        success = add_word(
            user_id=new_user(message.from_user),
            original=user_states[chat_id]['original'],
            translation=user_states[chat_id]['translation'],
            example=example
        )
        if success:
            bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.")
        menu(chat_id)

    # –õ–æ–≥–∏–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
    elif state.get('stage') == 'delete':
        deleted = delete_word(new_user(message.from_user), text)
        if deleted:
            bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(chat_id, "‚ùå –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
        menu(chat_id)

@bot.message_handler(func=lambda message: message.text.lower() in ['—É—á–∏—Ç—å —Å–ª–æ–≤–∞', 'üß† —É—á–∏—Ç—å —Å–ª–æ–≤–∞'])
def handle_learn_words_text(message):
    lear_words(message)


@bot.message_handler(func=lambda message: message.text.lower() in ['–≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'üìë –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'])
def handle_choose_category_text(message):
    choose_category(message)


@bot.message_handler(func=lambda message: message.text.lower() in ['–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', 'üìù –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'])
def handle_add_word_text(message):
    handle_add_word(message)


@bot.message_handler(func=lambda message: message.text.lower() in ['—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', 'üóë —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'])
def handle_delete_word_text(message):
    handle_delete_word(message)


if __name__ == '__main__':
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω')
    bot.polling(none_stop=True)