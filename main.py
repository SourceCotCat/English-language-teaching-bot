# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è Tg-–±–æ—Ç–∞
import telebot
from telebot import types

from config import init_bd

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –ë–î —á–µ—Ä–µ–∑ SQLAlchemy ORM
from database import (
    new_user,
    get_categories,
    get_words_by_category,
    get_word_and_vars,
    add_word,
    delete_word,
    get_wrong_translations
)

# –ò–º–ø–æ—Ä—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import os
import random
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
bot = telebot.TeleBot(os.getenv("TOKEN"))

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç)
user_states = {}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def welcome(message):
    user = message.from_user  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    try:
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        user_id_db = new_user(user)
        print(f"[INFO] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å ID –≤ –ë–î: {user_id_db}")
    except Exception as e:
        # –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        print(f"[ERROR] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        bot.send_message(message.chat.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    first_name = user.first_name
    last_name = user.last_name if user.last_name else ""
    bot.reply_to(message, f"–ü—Ä–∏–≤–µ—Ç, {first_name} {last_name}! –ù–∞—á–Ω—ë–º —É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π!")

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    menu(message.chat.id)


def menu(chat):
    # –°–æ–∑–¥–∞—ë–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    keyb = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    press_learn = types.KeyboardButton('üß† –£—á–∏—Ç—å —Å–ª–æ–≤–∞')
    press_category = types.KeyboardButton('üìë –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
    press_add = types.KeyboardButton('üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
    press_delete = types.KeyboardButton('üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
    keyb.add(press_learn, press_category, press_add, press_delete)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é
    bot.send_message(chat, "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyb)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
@bot.message_handler(func=lambda m: m.text == 'üìë –í—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é')
def choose_category(message):
    categories = get_categories()  # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ –ë–î
    if not categories:
        bot.send_message(message.chat.id, "–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
        return

    # –°–æ–∑–¥–∞—ë–º inline-–∫–Ω–æ–ø–∫–∏
    inline_keyb = types.InlineKeyboardMarkup(row_width=1)
    for id, name in categories:
        inline_keyb.add(types.InlineKeyboardButton(name, callback_data=f"category_{id}"))

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=inline_keyb)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline-–∫–Ω–æ–ø–∫—É —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
@bot.callback_query_handler(func=lambda call: call.data.startswith("category_"))
def category(call):
    category_id = int(call.data.split("_")[1])  # –ü–æ–ª—É—á–∞–µ–º ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ç–µ–∫—Å—Ç–∞
    user_states[call.from_user.id] = {'category_id': category_id, 'attempts': 0}  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    send_next_word(call.message.chat.id, call.from_user.id, category_id)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –∏–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–ª–æ–≤–∞
def send_next_word(chat_id, user_id, category_id=None):
    if category_id:
        word_data = get_words_by_category(category_id, user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª–æ–≤–æ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        if not word_data:
            bot.send_message(chat_id, "–ù–µ—Ç –±–æ–ª—å—à–µ —Å–ª–æ–≤ –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            menu(chat_id)
            return

        word_id, original, correct_translation = word_data
        wrong_translations = get_wrong_translations(word_id, user_id)  # –ü–æ–ª—É—á–∞–µ–º 3 –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–µ—Ä–µ–≤–æ–¥–∞
        options = [correct_translation] + wrong_translations
        random.shuffle(options)  # –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç—ã

        user_states[chat_id] = {
            'correct': correct_translation,
            'category_id': category_id,
            'attempts': 0
        }

    else:
        result = get_word_and_vars(user_id)  # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —Å–ª–æ–≤–æ –∏ –≤–∞—Ä–∏–∞–Ω—Ç—ã
        if not result:
            bot.send_message(chat_id, "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ–≤.")
            menu(chat_id)
            return

        original, options, correct_translation = result

        user_states[chat_id] = {
            'correct': correct_translation,
            'category_id': None,
            'attempts': 0
        }

    # –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –ø–µ—Ä–µ–≤–æ–¥–∞
    markup = types.ReplyKeyboardMarkup(row_width=2, resize_keyboard=True)
    buttons = [types.KeyboardButton(option) for option in options]
    buttons.append(types.KeyboardButton("‚¨Ö –ù–∞–∑–∞–¥"))
    markup.add(*buttons)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    bot.send_message(
        chat_id,
        f"–ü–µ—Ä–µ–≤–µ–¥–∏ —Å–ª–æ–≤–æ: *{original}*",
        parse_mode="Markdown",
        reply_markup=markup
    )


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£—á–∏—Ç—å —Å–ª–æ–≤–∞"
@bot.message_handler(func=lambda m: m.text == 'üß† –£—á–∏—Ç—å —Å–ª–æ–≤–∞')
def lear_words(message):
    send_next_word(message.chat.id, message.from_user.id)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda m: m.text == 'üìù –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ')
def handle_add_word(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å (–Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º):')
    user_states[message.chat.id] = {'stage': 'original'}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞
@bot.message_handler(func=lambda m: m.text == 'üóë –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ')
def handle_delete_word(message):
    bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:')
    user_states[message.chat.id] = {'stage': 'delete'}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(func=lambda message: True)
def handle_input(message):
    chat_id = message.chat.id
    text = message.text.strip()
    state = user_states.get(chat_id, {})

    if text == "‚¨Ö –ù–∞–∑–∞–¥":
        menu(chat_id)
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç–≤–µ—Ç–∞
    if state.get('correct') is not None:
        if text == state['correct']:
            bot.send_message(chat_id, "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!")
            if state.get('category_id') is not None:
                send_next_word(chat_id, message.from_user.id, state['category_id'])
            else:
                send_next_word(chat_id, message.from_user.id)
        else:
            attempts = state.get('attempts', 0) + 1
            if attempts < 2:
                bot.send_message(chat_id, f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ ({attempts}/2):")
                user_states[chat_id]['attempts'] = attempts
            else:
                bot.send_message(chat_id, f"‚ùå –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: *{state['correct']}*", parse_mode="Markdown")
                menu(chat_id)
        return

    # –≠—Ç–∞–ø 1: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞ ‚Äî –æ—Ä–∏–≥–∏–Ω–∞–ª(–Ω–∞ –∞–Ω–≥–ª)
    if state.get('stage') == 'original':
        user_states[chat_id]['original'] = text
        user_states[chat_id]['stage'] = 'translation'
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —Ä—É—Å—Å–∫–∏–π:")

    # –≠—Ç–∞–ø 2: –ø–µ—Ä–µ–≤–æ–¥
    elif state.get('stage') == 'translation':
        user_states[chat_id]['translation'] = text
        user_states[chat_id]['stage'] = 'example'
        bot.send_message(chat_id, "–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:")

    # –≠—Ç–∞–ø 3: –ø—Ä–∏–º–µ—Ä
    elif state.get('stage') == 'example':
        example = text
        success = add_word(
            user_id=new_user(message.from_user),
            original=user_states[chat_id]['original'],
            translation=user_states[chat_id]['translation'],
            example=example
        )
        if success:
            bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!")
        else:
            bot.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Å–ª–æ–≤–∞.")
        menu(chat_id)

    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞
    elif state.get('stage') == 'delete':
        deleted = delete_word(new_user(message.from_user), text)
        if deleted:
            bot.send_message(chat_id, "‚úÖ –°–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            bot.send_message(chat_id, "‚ùå –¢–∞–∫–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–µ—Ç –≤ –≤–∞—à–µ–º —Å–ø–∏—Å–∫–µ.")
        menu(chat_id)

# –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –≤–≤–æ–¥–∞ —á–µ—Ä–µ–∑ —Ç–µ–∫—Å—Ç 
@bot.message_handler(func=lambda message: message.text.lower() in ['—É—á–∏—Ç—å —Å–ª–æ–≤–∞', 'üß† —É—á–∏—Ç—å —Å–ª–æ–≤–∞'])
def handle_learn_words_text(message):
    lear_words(message)


@bot.message_handler(func=lambda message: message.text.lower() in ['–≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é', 'üìë –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é'])
def handle_choose_category_text(message):
    choose_category(message)


@bot.message_handler(func=lambda message: message.text.lower() in ['–¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', 'üìù –¥–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ'])
def handle_add_word_text(message):
    handle_add_word(message)


@bot.message_handler(func=lambda message: message.text.lower() in ['—É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', 'üóë —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ'])
def handle_delete_word_text(message):
    handle_delete_word(message)


if __name__ == '__main__':
    init_bd()
    print('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞')
    print('–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∫—É—Å—å')
    bot.polling(none_stop=True)
